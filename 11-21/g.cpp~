#include <stdio.h>
#include <stack>
#include <math.h>
#include <string.h>
#include <iostream>
#include <queue>
using namespace std;

const int MAXN = 10000;
const int MAXM = 200000;
const int INF = 0x3f3f3f3f;
struct Edge
{
	int to,next,cap,flow;
	double cost;
}edge[MAXM];
int head[MAXN],tol;
int pre[MAXN];
double dis[MAXN];
bool vis[MAXN];
int N;//节点总个数,节点编号从0~N-1
void init(int n){
	N = n;
	tol = 0;
	memset(head,-1,sizeof(head));
}
void add(int u,int v,int cap,double cost){
	edge[tol].to = v;
	edge[tol].cap = cap;
	edge[tol].cost = cost;
	edge[tol].flow = 0;
	edge[tol].next = head[u];
	head[u] = tol++;
	edge[tol].to = u;
	edge[tol].cap = 0;
	edge[tol].cost = -cost;
	edge[tol].flow = 0;
	edge[tol].next = head[v];
	head[v] = tol++;
}
bool spfa(int s,int t){
	queue<int>q;
	for(int i = 0;i < N;i++){
		dis[i] = 1e200;
		vis[i] = false;
		pre[i] = -1;
	}
	dis[s] = 0;
	vis[s] = true;
	q.push(s);
	while(!q.empty()){
		int u = q.front();
		q.pop();
		vis[u] = false;
		for(int i = head[u]; i != -1;i = edge[i].next){
			int v = edge[i].to;
			if(edge[i].cap > edge[i].flow &&
			dis[v] > dis[u] + edge[i].cost+1e-7 ){
				dis[v] = dis[u] + edge[i].cost;
				pre[v] = i;
				if(!vis[v]){
					vis[v] = true;
					q.push(v);
				}
			}
		}
	}
	if(pre[t] == -1)return false;
	else return true;
}
//返回的是最大流,cost存的是最小费用
int minCostMaxflow(int s,int t,double &cost)
{
	int flow = 0;
	cost = 0;
	while(spfa(s,t)){
		int Min = INF;
		for(int i = pre[t];i != -1;i = pre[edge[i^1].to]){
			if(Min > edge[i].cap - edge[i].flow)
			Min = edge[i].cap - edge[i].flow;
		}
		for(int i = pre[t];i != -1;i = pre[edge[i^1].to]){
			edge[i].flow += Min;
			edge[i^1].flow -= Min;
			cost += edge[i].cost * Min;
		}
		flow += Min;
	}
	return flow;
}

int main(){
	int T,x,y,z,n,m;
	double c;
	scanf("%d",&T);
	while(T--){
		int s=0,t;
		double cost=0;
		scanf("%d%d",&n,&m);
		t=n+1;
		int N=n+2;
		init(N);
		for(int i=1;i<=n;i++){
			scanf("%d%d",&x,&y);
			if(x>y) add(s,i,x-y,0);
				else if(y>x) add(i,t,y-x,0);
		}
		for(int i=0;i<m;i++){
			scanf("%d%d%d%lf",&x,&y,&z,&c);
			add(x,y,1,0);
			if(z>1) add(x,y,z-1,-log(1.0-c));
		}
		//NV=n+2;S=0,T=n+1;
		minCostMaxflow(s,t,cost);
		//double cost=fee_flow;
		cost=exp(-cost);
		cost=1.0-cost;
		printf("%.2f\n",cost);
	}
}

