#include <iostream>
#include <vector>
#include <queue>
#include <stdio.h>
#include <string.h>
#include <algorithm>
#define inf 0x7fffffff
using namespace std;
int vis[33][33],vis1[33],vis2[33][33];
vector<int> v;

struct Node{
	int num,next,v;
}edge[10006];
int mark[100],head[100],cnt;

void add(int x,int y){
	edge[cnt].num=y;
	edge[cnt].v=1;
	edge[cnt].next=head[x];
	head[x]=cnt++;
	edge[cnt].num=x;
	edge[cnt].v=0;
	edge[cnt].next=head[y];
	head[y]=cnt++;
}

bool bfs(int l,int r){
	memset(mark,0,sizeof(mark));
	queue<int> Q;
	Q.push(l);
	mark[l]=1;
	while(!Q.empty()){
		int k=Q.front();
			Q.pop();
			for(int i=head[k];i!=-1;i=edge[i].next){
				int n=edge[i].num;
				if(mark[n]==0&&edge[i].v>0){
					mark[n]=mark[k]+1;
					if(n!=r) Q.push(n);
				}
			}
	}
	if(mark[r]) return 1;
		else return 0;
}
int dfs(int l,int r,int v){
	if(l==r) return v;
	if(v==0) return 0;
	int vv,vnow=0;
	for(int i=head[l];i!=-1&&vnow<v;i=edge[i].next){
		int n=edge[i].num;
		if(mark[n]==mark[l]+1){
			vv=dfs(n,r,min(edge[i].v,v-vnow));
			edge[i].v-=vv;
			edge[i^1].v+=vv;
			vnow+=vv;
		}
		
	}
	if(!vnow) mark[l]=-1;
	return vnow;
}

int dinic(int l,int r){
	int ans=0,ll;
	while(bfs(l,r)){
		while(ll=dfs(l,r,inf))
			ans+=ll;
	}
	return ans;
}

int main(){
	int T;
	int n,m,k,x,y;
	scanf("%d",&T);
	while(T--){
		scanf("%d%d%d",&n,&m,&k);
		memset(vis,0,sizeof(vis));
		memset(head,-1,sizeof(head));
		cnt=0;
		for(int i=0;i<m;i++){
			scanf("%d%d",&x,&y);
			vis[x][y]=1;
			vis[y][x]=1;
		}
		memset(vis1,0,sizeof(vis1));
		for(int i=0;i<k;i++){
			scanf("%d",&x);
			vis1[x]=1;
		}
		memset(vis2,0,sizeof(vis2));
		for(int i=1;i<=n;i++)
			if(!vis1[i]){
				v.clear();
				for(int j=1;j<=n;j++)
					if(vis1[j]&&vis[i][j]) v.push_back(j);
				for(int i=0;i<v.size();i++)
					for(int j=i+1;j<v.size();j++){
						vis2[v[i]][v[j]]=1;
						vis2[v[j]][v[i]]=1;
					}
			}
		for(int i=1;i<=n;i++)
			for(int j=i+1;j<=n;j++)
				if(vis2[i][j]) add(i,j+n);
		for(int i=1;i<=n;i++)
			add(0,i),add(i+n,n+n+1);
		cout << dinic(0,n+n+1) << endl;

	}
}
